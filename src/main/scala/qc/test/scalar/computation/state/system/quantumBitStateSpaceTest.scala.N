package qc.test.scalar.computation.state.system

import math.types.scalar.{Complex}

import math.implementation.scalar.{complexScalar}

import complexScalar.{asString}

import qc.types.system.{Bit}

import math.examples.columnVectors.{interactiveRandomSeedQuantumBitStateSpace}

import interactiveRandomSeedQuantumBitStateSpace.{
  Σ,
  columnVector,
  ket,
  braKet,
  linearBraKetCombination,
  observeState,
  observeStateTwice
}

@main def quantumBitStateSpaceTest() =

  import math.examples.columnVectors.{complexColumnVector => quantumBitStateColumnVector}

  println()

  println("all kets")
  println("--------")
  Σ foreach { x => println(s"ket(${x})\n${ket(x)}") }

  extension (lx: Bit)
    def δ(rx: Bit): Complex = interactiveRandomSeedQuantumBitStateSpace.δ(lx)(rx)
  println("all lx braKet rx == lx δ rx")
  println("---------------------------")
  Σ foreach { lx =>
    Σ foreach { rx =>
      println(s"${asString(lx braKet rx)} == ${asString(lx δ rx)}")
    }
  }
  println()

  println(
    "quantumBitStateColumnVector == linearBraKetCombination(quantumBitStateColumnVector)"
  )
  println(
    "-----------------------------------------------------------------------------------------------"
  )
  print(quantumBitStateColumnVector)
  println("==")
  println(linearBraKetCombination(quantumBitStateColumnVector))

  println(
    "observeState(quantumBitStateColumnVector) == observeStateTwice(quantumBitStateColumnVector)"
  )
  println(
    "-------------------------------------------------------------------------------------------------------"
  )
  println()
  println(observeState(quantumBitStateColumnVector))
  println("==")
  println(observeStateTwice(quantumBitStateColumnVector))
  println()
