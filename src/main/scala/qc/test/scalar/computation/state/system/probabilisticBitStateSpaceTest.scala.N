package qc.test.scalar.computation.state.system

import math.types.scalar.{Real}

import math.implementation.scalar.{realScalar}

import realScalar.{asString}

import qc.types.system.{Bit}

import math.examples.columnVectors.{interactiveRandomSeedProbabilisticBitStateSpace}

import interactiveRandomSeedProbabilisticBitStateSpace.{
  Σ,
  columnVector,
  ket,
  braKet,
  linearBraKetCombination,
  observeState,
  observeStateTwice
}

@main def probabilisticBitStateSpaceTest() =

  import math.examples.columnVectors.{
    realColumnVector => probabilisticBitStateColumnVector
  }

  println()

  println("all kets")
  println("--------")
  Σ foreach { x => println(s"ket(${x})\n${ket(x)}") }

  extension (lx: Bit)
    def δ(rx: Bit): Real = interactiveRandomSeedProbabilisticBitStateSpace.δ(lx)(rx)
  println("all lx braKet rx == lx δ rx")
  println("---------------------------")
  Σ foreach { lx =>
    Σ foreach { rx =>
      println(s"${asString(lx braKet rx)} == ${asString(lx δ rx)}")
    }
  }
  println()

  println(
    "probabilisticBitStateColumnVector == linearBraKetCombination(probabilisticBitStateColumnVector)"
  )
  println(
    "-----------------------------------------------------------------------------------------------"
  )
  print(probabilisticBitStateColumnVector)
  println("==")
  println(linearBraKetCombination(probabilisticBitStateColumnVector))

  println(
    "observeState(probabilisticBitStateColumnVector) == observeStateTwice(probabilisticBitStateColumnVector)"
  )
  println(
    "-------------------------------------------------------------------------------------------------------"
  )
  println()
  println(observeState(probabilisticBitStateColumnVector))
  println("==")
  println(observeStateTwice(probabilisticBitStateColumnVector))
  println()
