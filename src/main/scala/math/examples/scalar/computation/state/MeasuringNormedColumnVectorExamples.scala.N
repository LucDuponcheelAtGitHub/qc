package math.examples.scalar.executable.state

import scala.util.{Random}

import math.specification.scalar.{NormedColumnVector}

import math.specification.scalar.executable.state.{
  measuringNormedColumnVector,
  twiceMeasuringNormedColumnVector
}

import math.types.scalar.{Real, Complex}

import math.implementation.scalar.{realScalar, complexScalar}

import math.examples.scalar.{
  realNormedColumnVectorSpace,
  normedRealColumnVector,
  complexNormedColumnVectorSpace,
  normedComplexColumnVector
}

import math.implementation.scalar.executable.state.{probabilisticStateVectorEvaluatable}

import math.implementation.scalar.executable.state.{quantumStateVectorEvaluatable}

val measuredNormedRealColumnVector: Random ?=> NormedColumnVector[Real] =
  measuringNormedColumnVector apply normedRealColumnVector

def twiceMeasuredNormedRealColumnVector: Random ?=> NormedColumnVector[Real] =
  twiceMeasuringNormedColumnVector apply normedRealColumnVector

val measuredNormedComplexColumnVector: Random ?=> NormedColumnVector[Complex] =
  measuringNormedColumnVector apply normedComplexColumnVector

val twiceMeasuredNormedComplexColumnVector: Random ?=> NormedColumnVector[Complex] =
  twiceMeasuringNormedColumnVector apply normedComplexColumnVector

// import qc.specification.scalar.executable.state.system.{SystemStateSpace}

// import qc.types.system.{Bit}

// import qc.implementation.system.{bitSystem}

// given probabilisticBitStateSpace
//     : SystemStateSpace[Real, StatefulWithState[NormedColumnVector[Real]][I], Bit] with

//   lazy val Σ: Seq[Bit] = bitSystem.Σ

// given quantumBitStateSpace
//     : SystemStateSpace[Complex, StatefulWithState[NormedColumnVector[Complex]][I], Bit] with

//   lazy val Σ: Seq[Bit] = bitSystem.Σ

// import scala.util.{Random}

// lazy val interactiveRandomReal: Real =
//     Random({
//       println("please provide a Long random generator seed")
//       println("note: 123 and 654321 will give different results")
//       val l = scala.io.StdIn.readLong()
//       println()
//       l
//     }).nextDouble()

// given interactiveRandomSeedProbabilisticBitStateSpace
//     : SystemStateSpace[Real, StatefulWithState[NormedColumnVector[Real]][I], Bit] with

//   lazy val Σ: Seq[Bit] = bitSystem.Σ

//   override lazy val randomReal: Real = interactiveRandomReal

// given interactiveRandomSeedQuantumBitStateSpace
//     : SystemStateSpace[Complex, StatefulWithState[NormedColumnVector[Complex]][I], Bit] with

//   lazy val Σ: Seq[Bit] = bitSystem.Σ

//   override lazy val randomReal: Real = interactiveRandomReal
